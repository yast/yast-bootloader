/**
 * File:
 *      include/bootloader/grub2/dialogs.ycp
 *
 * Module:
 *      Bootloader installation and configuration
 *
 * Summary:
 *      Dialogs for configuraion i386-specific functions
 *
 * Authors:
 *      Jiri Srain <jsrain@suse.cz>
 *
 * $Id: dialogs.ycp 56563 2009-04-02 08:41:25Z jreidinger $
 *
 */

{

textdomain "bootloader";


import "Label";
import "Wizard";
import "CWM";
import "BootCommon";
import "Stage";

include "bootloader/grub2/options.ycp";

/**
 * Run dialog for loader installation details for Grub2
 * @return symbol for wizard sequencer
 */
symbol Grub2LoaderDetailsDialog ()
{
    y2milestone ("Running Grub2 loader details dialog");
    term contents = `HBox (
        `HSpacing (2),
        `VBox (
            `VStretch (),
            `HBox (
            `HSquash("distributor"),
            "hiddenmenu",
            "os_prober",
            `HStretch ()
            ),
            `HBox (
            "activate",
            "generic_mbr",
            `HStretch ()
            ),
            `HBox (
            `HSquash("timeout"),
            "vgamode",
            `HStretch ()
            ),
            `Left("append"),
            `Left("append_failsafe"),
            `Left("default"),
            `Left("console"),
            `Left("gfxterm"),
            `VStretch ()
		),
     	`HSpacing (2)
	);

    string lt = BootCommon::getLoaderType (false);
    list<string> widget_names = (lt == "grub2-efi")
                                ? ["distributor", "hiddenmenu", "os_prober", "timeout", "append", "append_failsafe", "console", "default", "vgamode"]
                                : ["distributor", "activate","generic_mbr", "hiddenmenu", "os_prober", "timeout", "append", "append_failsafe", "console", "default", "vgamode"];

    string caption = _("Boot Loader Options");
    return CWM::ShowAndRun ($[
        "widget_descr" : Grub2Options(),
        "widget_names" : widget_names,
        "contents" : contents,
        "caption" : caption,
        "back_button" : Label::BackButton (),
        "abort_button" : Label::CancelButton (),
        "next_button" : Label::OKButton (),
    ]);
}

include "bootloader/grub/options.ycp";

void  InitSecureBootWidget(string widget) {
    boolean sb = BootCommon::getSystemSecureBootStatus(false);
    UI::ChangeWidget (`id ("secure_boot"), `Value, sb);
}
symbol HandleSecureBootWidget (string widget, map event) {
    return nil;
}
void StoreSecureBootWidget (string widget, map event) {
    boolean sb = (boolean)UI::QueryWidget(`id("secure_boot"), `Value);
    BootCommon::setSystemSecureBootStatus (sb);
}
string HelpSecureBootWidget() {
    string ret = "Tick to enable UEFI Secure Boot\n";
    return ret;
}

map<string,any> grub2SecureBootWidget ()
{
    term contents = `VBox (
	`Frame (_("Secure Boot"),
	   `VBox (`HBox(`HSpacing(1),`VBox(
	       `Left(`CheckBox( `id("secure_boot"), _("Enable &Secure Boot Support"))),
	       `VStretch()
            )))
         ),
	`VStretch()
    );

    return $[
      "widget" : `custom,
      "custom_widget" : contents,
      "init" : InitSecureBootWidget,
      "handle" : HandleSecureBootWidget,
      "store" : StoreSecureBootWidget,
      "help" : HelpSecureBootWidget(),
  ];
}

/**
 * Run dialog to adjust installation on i386 and AMD64
 * @return symbol for wizard sequencer
 */
symbol Grub2InstallDetailsDialog () {
    term contents =  `HBox (`HStretch (), `VBox (
        `VStretch(),
        `Frame (_("Disk Order"),"disks_order"),
        `VStretch()),
        `HStretch());

    return CWM::ShowAndRun ($[
        "widget_descr": $[ "disks_order": DisksOrderWidget()],
        "widget_names": ["disks_order"],
        "contents": contents,
        "caption" : _("Disk order settings"),
        "back_button" : Label::BackButton (),
        "abort_button" : Label::CancelButton (),
        "next_button" : Label::OKButton ()
    ]);
}

/**
 * Cache for genericWidgets function
 */
map<string,map<string,any> > _grub2_widgets = nil;
map<string,map<string,any> > _grub2_efi_widgets = nil;

/**
 * Get generic widgets
 * @return a map describing all generic widgets
 */
global map<string,map<string,any> > grub2Widgets () {
    if (_grub2_widgets == nil)
    {
	_grub2_widgets = $[
	    "loader_location"	  : grubBootLoaderLocationWidget (),
	];
    }
    return _grub2_widgets;
}

global map<string,map<string,any> > grub2efiWidgets () {

    if (Arch::x86_64 ())
    {
        if (_grub2_efi_widgets == nil)
        {
            _grub2_efi_widgets = $[
                "loader_location" : grub2SecureBootWidget ()
            ];
        }
    }

    return _grub2_efi_widgets;
}

} //EOF

