/**
 * File:
 *      include/bootloader/grub2/dialogs.ycp
 *
 * Module:
 *      Bootloader installation and configuration
 *
 * Summary:
 *      Dialogs for configuraion i386-specific functions
 *
 * Authors:
 *      Jiri Srain <jsrain@suse.cz>
 *
 * $Id: dialogs.ycp 56563 2009-04-02 08:41:25Z jreidinger $
 *
 */

{

textdomain "bootloader";


import "Label";
import "Wizard";
import "CWM";
import "BootCommon";
import "Stage";

include "bootloader/grub2/options.ycp";

/**
 * Run dialog for loader installation details for Grub2
 * @return symbol for wizard sequencer
 */
symbol Grub2LoaderDetailsDialog ()
{
    y2milestone ("Running Grub2 loader details dialog");
    term contents = `HBox (
        `HSpacing (2),
        `VBox (
            `VStretch (),
            `Left(`HSquash("distributor")),
            `Left("activate"),
            `Left("generic_mbr"),
            `Left("hiddenmenu"),
            `HBox (
            `Left(`HSquash("timeout")),
            `Left("vgamode"),
            `HStretch ()
            ),
            `Left("append"),
            `Left("default"),
            `Left("console"),
            `Left("gfxterm"),
            `VStretch ()
		),
     	`HSpacing (2)
	);

    string lt = BootCommon::getLoaderType (false);
    list<string> widget_names = (lt == "grub2-efi")
                                ? ["distributor", "hiddenmenu", "timeout", "append", "console", "default", "vgamode"]
                                : ["distributor", "activate","generic_mbr", "hiddenmenu", "timeout", "append", "console", "default", "vgamode"];

    string caption = _("Boot Loader Options");
    return CWM::ShowAndRun ($[
        "widget_descr" : Grub2Options(),
        "widget_names" : widget_names,
        "contents" : contents,
        "caption" : caption,
        "back_button" : Label::BackButton (),
        "abort_button" : Label::CancelButton (),
        "next_button" : Label::OKButton (),
    ]);
}

include "bootloader/grub/options.ycp";

/**
 * Cache for genericWidgets function
 */
map<string,map<string,any> > _grub2_widgets = nil;

/**
 * Get generic widgets
 * @return a map describing all generic widgets
 */
global map<string,map<string,any> > grub2Widgets () {
    if (_grub2_widgets == nil)
    {
	_grub2_widgets = $[
	    "loader_location"	  : grubBootLoaderLocationWidget (),
	];
    }
    return _grub2_widgets;
}

} //EOF

