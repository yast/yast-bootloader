/**
 * File:
 *      modules/BootGRUB2EFI.ycp
 *
 * Module:
 *      Bootloader installation and configuration
 *
 * Summary:
 *      Module containing specific functions for GRUB2EFI configuration
 *      and installation
 *
 * Authors:
 *      Jiri Srain <jsrain@suse.cz>
 *      Joachim Plack <jplack@suse.de>
 *      Olaf Dabrunz <od@suse.de>
 *      Philipp Thomas <pth@suse.de>
 *
 * $Id: BootGRUB2EFI.ycp 63508 2011-03-04 12:53:27Z jreidinger $
 *
 */

{
module "BootGRUB2EFI";

textdomain "bootloader";

import "BootArch";
import "BootCommon";
import "BootStorage";
import "Kernel";
import "Mode";
import "Stage";
import "Storage";
import "StorageDevices";
import "Pkg";
import "HTML";
import "Initrd";
import "Product";

// includes
// for shared some routines with grub
// include "bootloader/grub/misc.ycp";
// for simplified widgets than other
include "bootloader/grub2/dialogs.ycp";
// general functions

/**
 * Propose global options of bootloader
 */
global map<string,string> StandardGlobals () {
    return $[
		"timeout" : "8",
		"default" : "0",
		"vgamode" : "",
		"gfxmode" : "auto",
		"terminal" : "gfxterm",
    ];
}

/**
 * Read settings from disk
 * @param reread boolean true to force reread settings from system
 * @param avoid_reading_device_map do not read new device map from file, use
 * internal data
 * @return boolean true on success
 */
global boolean Read (boolean reread, boolean avoid_reading_device_map) {
    BootCommon::InitializeLibrary (reread, "grub2-efi");
    if (reread) {
        BootCommon::ReadFiles (avoid_reading_device_map);
    }
    // TODO: check if necessary for grub2efi
    // grub_DetectDisks ();
    boolean ret = BootCommon::Read (false, avoid_reading_device_map);

    // TODO: check if necessary for grub2
    // refresh device map if not read
    // if (BootStorage::device_mapping == nil
    //    || size (BootStorage::device_mapping) == 0)
    // {
    //    BootStorage::ProposeDeviceMap ();
    // }

    return ret;
}

/**
  * Update read settings to new version of configuration files
  */
global define void Update () {
    Read (true, true);

    //we don't handle sections, grub2 section create them for us
    //BootCommon::UpdateSections ();
    BootCommon::UpdateGlobals ();
}

/**
  * Write bootloader settings to disk
  * @return boolean true on success
  */
global define boolean Write () {

    boolean ret = BootCommon::UpdateBootloader ();

    if (BootCommon::location_changed) {
        boolean grub_ret = BootCommon::InitializeBootloader ();
        if (grub_ret == nil)
            grub_ret = false;

        y2milestone ("GRUB2EFI return value: %1", grub_ret);
        ret = ret && grub_ret;
    }

    return ret;
}

/**
  * Reset bootloader settings
  * @param init boolean true to repropose also device map
  */
global define void Reset (boolean init) {
    if (Mode::autoinst ())
        return;
    BootCommon::Reset (init);
}

/**
  * Propose bootloader settings
  */

global define void Propose () {
    y2milestone ("Proposed globals: %1", BootCommon::globals);

    if (BootCommon::globals == nil || size (BootCommon::globals) == 0)
    {
        BootCommon::globals = StandardGlobals();
    }

    map<string, integer> swap_sizes = BootCommon::getSwapPartitions ();
    list<string> swap_parts = (list<string>)
        maplist (string name, integer size, swap_sizes, ``(name));
    swap_parts = sort (string a, string b, swap_parts,
                       ``(swap_sizes[a]:0 > swap_sizes[b]:0)
                       );

    string largest_swap_part = swap_parts[0]:"";

    string resume = BootArch::ResumeAvailable ()
        ? largest_swap_part
        : "";
    // try to use label or udev id for device name... FATE #302219
    if ((resume != "") && (resume != nil))
        resume = BootStorage::Dev2MountByDev(resume);
    BootCommon::globals["append"] = BootArch::DefaultKernelParams (resume);
    BootCommon::globals["append_failsafe"] = BootArch::FailsafeKernelParams ();
    BootCommon::globals["distributor"] = Product::name;
    BootCommon::kernelCmdLine = Kernel::GetCmdLine ();

    // Let grub2 scripts detects correct root= for us. :)
    // BootCommon::globals["root"] = BootStorage::Dev2MountByDev(BootStorage::RootPartitionDevice);

    // We don't set vga= if Grub2 gfxterm enabled, because the modesettings
    // will be delivered to kernel by Grub2's gfxpayload set to "keep"
    //if (BootArch::VgaAvailable () && Kernel::GetVgaType () != "")
    //{
    //    BootCommon::globals["vgamode"] = Kernel::GetVgaType ();
    //}
}

/**
  * Display bootloader summary
  * @return a list of summary lines
  */

global define list<string> Summary () {
    list<string> result = [ sformat (_("Boot Loader Type: %1"),
        BootCommon::getLoaderName (BootCommon::getLoaderType (false), `summary)) ];
    list<string> locations = [];

    return result;
}

global map<string,symbol()> Dialogs () {
    y2milestone ("Called GRUB2 Dialogs");
    return $[
        "loader"	: Grub2LoaderDetailsDialog,
    ];
}

/**
 * Return map of provided functions
 * @return a map of functions (eg. $["write":BootGRUB2EFI::Write])
 */
global map<string, any> GetFunctions () {
    return $[
        "read"                  : Read,
        "reset"                 : Reset,
        "propose"               : Propose,
        "summary"               : Summary,
        "update"                : Update,
        #TODO grub2widgets
        #"widgets"               : grub2Widgets,
        "dialogs"               : Dialogs,
        "widgets"               : $[],
        "write"                 : Write,
    ];
}


/**
  * Initializer of GRUB2EFI bootloader
  */
global define void Initializer () {
    y2milestone ("Called GRUB2EFI initializer");
    BootCommon::current_bootloader_attribs = $[
        "propose" : false,
        "read" : false,
        "scratch" : false,
        "restore_mbr" : false,
        "bootloader_on_disk" : false,
    ];
}

/**
  * Constructor
  */
global define void BootGRUB2EFI () {
    BootCommon::bootloader_attribs["grub2-efi"] = $[
        "required_packages" : ["grub2-efi"],
        "loader_name" : "GRUB2-EFI",
        "initializer" : BootGRUB2EFI::Initializer,
    ];
}

} // EOF

/*
 * Local variables:
 *     mode: ycp
 *     mode: font-lock
 *     mode: auto-fill
 *     indent-level: 4
 *     fill-column: 78
 * End:
 */

